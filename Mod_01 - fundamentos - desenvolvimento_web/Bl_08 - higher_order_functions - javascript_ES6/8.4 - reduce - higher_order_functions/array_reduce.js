//Array.prototype.reduce()

/*
diferente das outras HOFs: ele recebe dois par√¢metros sendo o primeiro uma callback e o segundo um valor inicial, que √© opcional.

Como o pr√≥prio nome diz o reduce busca reduzir um array. Isto √©, iterando em elementos de um array, ao final ele gera um valor √∫nico de qualquer tipo, como, por exemplo, a soma de todos os elementos de tal array.

Como principais vantagens do uso do m√©todo reduce podemos destacar:
 * escrita de c√≥digo mais limpo;
 * maior facilidade ao implementar a l√≥gica com a qual se quer trabalhar;
 * melhor manuten√ß√£o de c√≥digo.

*Sintaxe:
reduce((accumulator, currentValue, currentIndex, array) => { ... }, initialValue );

A callback, que √© o primeiro par√¢metro do reduce, tamb√©m pode receber at√© quatro par√¢metros. Desses quatro par√¢metros apenas dois deles devem existir obrigatoriamente, sendo eles o acc (abreviatura de accumulator) e o curr (abreviatura de currentValue).
O acumulador, deve obrigatoriamente ser o primeiro par√¢metro da callback e o currentValue (valor atual) tamb√©m obrigat√≥rio, deve ser o segundo par√¢metro da callback.
*/

const numbers = [1, 32, 44, 2, 3];
const iteracoesReduce = numbers.reduce((acc, curr) => {
  console.log(`valor atual √©: ${curr}`);
  return acc + curr;
   // Ao fim das itera√ß√µes podemos ver que o `acc` armazenou o resultado total do retorno da fun√ß√£o.
});
console.log(`resultado final √©: ${iteracoesReduce}`);
// valor atual √©: 32
// valor atual √©: 44
// valor atual √©: 2
// valor atual √©: 3
// resultado final √©: 82

//Itera√ß√£o passo-a-passo:

// Antes da primeira itera√ß√£o o valor de in√≠cio do `acc` √© o valor no index 0 do array, e o valor de in√≠cio de `curr` √© o valor no index 1 do array.
      // valor atual √©: 32 // Itera√ß√£o 1: valor do acc √© 1 e o de curr √© 32;

// Ap√≥s a primeira itera√ß√£o, o valor de `acc` muda e passa a acumular agora o resultado do retorno da callback (acc + curr).
     // valor atual √©: 44 // Itera√ß√£o 2: valor do acc √© 33 e o de curr √© 44;

// Acontece ent√£o uma segunda itera√ß√£o, e `curr` agora assume o valor do index na sequ√™ncia do array, no caso o valor do segundo index e `acc` segue armazenando os retornos.
    // valor atual √©: 2 // Itera√ß√£o 3: valor do acc √© 77 e o de curr √© 2;

    // valor atual √©: 3 // Itera√ß√£o 4: valor do acc √© 79 e o de curr √© 3;

    // resultado final √©: 82 // Valor final de `acc`√© 82 e `curr` para no 3.


// * Passando um valor para o acc:
//Imagine que novamente voc√™ queira somar todos os valores de um array. Mas agora teremos um valor inicial j√° estipulado para o acc.

//SEM utiliza√ß√£o da HOF reduce:
numbers = [1, 32, 44, 2, 3];
let sumNumbers = 30;
  // A vari√°vel `sumNumbers` tem um valor inicial de 30 e vai acumulando, a cada itera√ß√£o do for, o resultado da opera√ß√£o feita em seu escopo!
for (let index = 0; index < numbers.length; index += 1) {
  sumNumbers += numbers[index];
}
console.log(sumNumbers); // 112

//Utilizando a HOF 'reduce':
numbers = [1, 32, 44, 2, 3];
const totalSum = numbers.reduce((acc, curr) => {
  console.log(`accumulator: ${acc} e current value: ${curr}`);
  return acc + curr;
}, 30);
// O `valorInicial` √© 30, ou seja, `acc` antes de executar a primeira itera√ß√£o j√° est√° armazenando esse valor.

console.log(`valor final accumulator: ${totalSum}`);
// por fim, esse `console.log` imprime o retorno da nossa fun√ß√£o, que √© o valor final de `acc` ap√≥s cada uma das 5 itera√ß√µes, tendo iniciado com valor 30

//Pode parecer estranho definir um valor fixo para o acumulador, mas isso porque estamos trabalhando com n√∫meros. O reduce √© uma ferramenta poderosa e em um c√≥digo mais complexo ele poderia receber um valor din√¢mico, atrav√©s de uma vari√°vel ou at√© mesmo qualquer valor que n√£o seja um n√∫mero. Vale lembrar tamb√©m que voc√™ aprendeu a usar o reduce com seus dois primeiros par√¢metros, mas embora pouco utilizados, existem mais dois par√¢metros opcionais: index e array.

//qual a vantagem de se usar o reduce ü§î?

/*
Vamos dissecar a diferen√ßa ao usar o 'for' e ao usar o 'reduce':
* M√©todo for:
  * Necessidade de criar uma vari√°vel para acumular o resultado de cada itera√ß√£o do for, a soma de cada resultado --> let sumNumbers;
  * Necessidade de setar um valor inicial para vari√°vel --> sumNumbers = 30;

* M√©todo .reduce:
  * A fun√ß√£o callback passada por par√¢metro recebe dois par√¢metros, o acumulador acc e o elemento do array de cada itera√ß√£o, curr;
  
  * Como a fun√ß√£o √© uma arrow function que possui apenas uma linha, o retorno de cada itera√ß√£o ser√°: acc + curr;

  * O retorno √© salvo no primeiro par√¢metro , acc. √â como se voc√™ estivesse fazendo igual √† primeira fun√ß√£o, sumNumbers = sumNumbers + numbers[index], mas nesse caso seria acc = acc + curr;
*/

//Podemos tamb√©m ao inv√©s de passar a l√≥gica direto dentro da callback do reduce, voc√™ pode criar uma fun√ß√£o externa e cham√°-la como sendo o par√¢metro callback:

numbers = [1, 32, 44, 2, 3];

sumNumbers = (acc, curr) => acc + curr;

totalSum = numbers.reduce(sumNumbers, 30);

console.log(totalSum); // 112 --> 30 + [1 + 32 + 44 + 2 + 3]

//Dessa maneira seu c√≥digo fica mais organizado e voc√™ poder√° e.g. reutilizar a fun√ß√£o 'sumNumbers' caso seja necess√°rio.

/* 
Aten√ß√£o!!!
Reduce √© a The One HOF:
O reduce vai fazer tudo e substituir todas as HOFs dependendo da condi√ß√£o que for passada para ela:
  * Queres somar algo?
Basta agregar os elementos no acumulador;

  * Para filtrar algo?
Basta fazer uma verifica√ß√£o nele comparando 2 valores;

  * Para mapear algo?
Basta por uma condi√ß√£o necess√°ria, digamos que  quer pegar o valorCorrente.status, ele te retorna tudo nesse valor;

  * Para encontrar algo?
 A mesma coisa, basta comparar o que est√° chegando com o que queremos filtrar.

Enfim, ele literalmente faz tudo que quisermos, depende apenas de como expomos as condi√ß√µes.
*/
