//Exerc√≠cios:
/*
function testingScope(escopo) {
  if (escopo === true) {
    var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
  console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
}

testingScope(true);

üöÄ 1. Conforme o c√≥digo acima, altere as vari√°veis para respeitarem o escopo em que foram declaradas:
  * Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
  * Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
  * Modifique as concatena√ß√µes para template literals.
*/

const testingScope = escopo => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}
testingScope(true);

/*
üöÄ 2. Crie uma fun√ß√£o que retorne um array em ordem crescente.
Copie o c√≥digo abaixo:

    const oddsAndEvens = [13, 3, 4, 10, 7, 2];

    // Seu c√≥digo aqui.

    console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ

 * Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;

 * Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.

     * Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

 * B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). 

Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
*/

/*
----------------------------------------------------------------
        Entendendo o conceito do M√©todo array.sort():
----------------------------------------------------------------

Se o parametro da fun√ß√£o 'compare' √© fornecido, o array ser√° ordenado de acordo com o valor de retorno da fun√ß√£o 'compare'.

Considerando que a e b s√£o dois elementos sendo comparados, ent√£o:

>>> Se function compare (a, b) for menor que 0, ordena 'a' para um √≠ndice anterior a 'b', i.e. a vem primeiro.

>>> Se function compare(a, b) retornar 0, deixa 'a' e 'b' inalterados em rela√ß√£o um ao outro, mas ordenado em rela√ß√£o a todos os outros elementos.

* Nota: O padr√£o ECMAscript n√£o garante este comportamento, e, portanto, nem todos os navegadores (e.g. Vers√µes do Mozilla anteriores a 2003) respeitar√£o isto.

>>> Se function compare(a, b) √© maior que 0, ordena 'b' para um √≠ndice anterior que 'a'.

* Aten√ß√£o! a function compare(a, b) sempre deve retornar o mesmo valor dado um par espec√≠fico de elementos 'a' e 'b' como seus dois parametros. Se resultados inconsistentes s√£o retornados, ent√£o a ordena√ß√£o √© indefinida.

function comparar(a, b) {
  if (a √© menor que b em algum crit√©rio de ordena√ß√£o) {
    return -1;
  }
  if (a √© maior que b em algum crit√©rio de ordena√ß√£o) {
    return 1;
  }
  // a deve ser igual a b
  return 0;
}
*/


const numbers = [74, 18, 10, 5, 84, 23, 105];

const compare = (a, b) => {
  //se o retorno da fun√ß√£o for < 0 ... o 'a' vir√° primeiro;
  //se o retorno da fun√ß√£o for = 0 ... nada ser√° modificado;
  //se o retorno da fun√ß√£o for > 0 ... o 'b' vir√° primeiro;

  return a - b;
}

numbers.sort(compare);

console.log(numbers);

//---------------------------------------------------------------



const oddsAndEvens = [13, 3, 4, 10, 7, 2];


const compareNumbers = (a, b) => a - b; 

oddsAndEvens.sort(compareNumbers);

console.log(oddsAndEvens);


/*
const crescentOrder = oddsAndEvens => {
  let order = 0;

  for (let element of oddsAndEvens) {
    if (element < order) {
      order = oddsAndEvens.push();
    }
  }
  return console.log(`Os n√∫meros ${order} se encontram ordenados de forma crescente!`);
};
console.log(crescentOrder);
*/